#!/usr/bin/env python3
"""
test_spectrum.py

Test the spectrum.py module.
"""

import pytest
import numpy as np
import matplotlib.pyplot as plt
from pkg_resources import resource_filename

from astropy.io import ascii

from amespahdbpythonsuite.amespahdb import AmesPAHdb
from amespahdbpythonsuite import spectrum


@pytest.fixture(scope="module")
def pahdb_theoretical():
    xml = 'resources/pahdb-theoretical_cutdown.xml'
    pahdb = AmesPAHdb(filename=resource_filename('amespahdbpythonsuite', xml),
                      check=False, cache=False)
    return pahdb


@pytest.fixture(scope="module")
def test_spec():

    tspec1 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       2.115758269036993e-297, 8.575867155808166e-272, 1.4184094607903695e-247,
                       1.0525750342552996e-224, 3.8348256865319657e-203, 7.523975930193912e-183,
                       8.657439192806589e-164, 6.354889340275835e-146, 3.223640190831582e-129,
                       1.2251927214087232e-113, 3.757540498432719e-99, 1.003112661252551e-85,
                       2.5014744103460887e-73, 6.247365156435278e-62, 1.670840002701049e-51,
                       5.112450685639748e-42, 1.9055093391271904e-33, 9.199964628147248e-26,
                       6.107260335807569e-19, 5.906099452665125e-13, 8.800001382599416e-08,
                       0.002133529779036493, 8.887112614838683, 6771.400529799867,
                       1079627.1348021727, 58143607.643346705, 1798490448.098055,
                       20588617623.1897, 65403794163.76664, 57895417068.20652,
                       16204496070.164818, 15746440541.869951, 33779618705.56285,
                       20856075749.313873, 11840703696.342022, 44918209293.190384,
                       66452929445.19624, 29088712054.09472, 6833285764.456433,
                       8397646340.766392, 10486561319.005087, 8791577040.139153,
                       20262462669.337914, 31980374648.30564, 18766696087.30055,
                       5027978775.679776, 3377100768.649164, 8387012655.421897,
                       9858879026.99639, 4729276482.236536, 2823562433.862537,
                       7632217315.349266, 13370638097.25765, 10815243174.336367,
                       5115688029.882989, 2159910721.5337653, 974943745.9963177,
                       1706227394.3957713, 9725369315.89764, 37898498055.481155,
                       87172236307.01108, 132090345249.66626, 123587862034.25479,
                       63369061102.50195, 17373595145.051544, 5826033253.382403,
                       24319598300.81867, 27218134797.81243, 106579588045.86594,
                       202563665637.362, 206911911885.94208, 138415031868.1035,
                       25437711379.8146, 9504268397.71034, 70226758067.79018,
                       98083861640.30786, 58119373656.52836, 7030617357.709166,
                       14972253565.312744, 16300344695.747543, 2399125657.159755,
                       1689751527.6245868, 12488752311.01121, 25910915920.354797,
                       20197480473.44475, 8504330333.4162035, 31593139870.741085,
                       53346155116.21788, 21949822155.176464, 14704870362.113361,
                       13330775382.750551, 3283040928.817499, 409657847.82906973,
                       1079481520.3451414, 3740254278.8168216, 3329425666.456967,
                       1034402875.5964293, 6948189680.380692, 57943731583.476494,
                       137854499976.4709, 96272218553.89404, 20776636312.925312,
                       1641971358.913902, 383650521.93123317, 393220245.64983255,
                       2912354596.8811307, 21430181169.281338, 58356101214.768684,
                       58670388574.313934, 22507008037.586704, 3451714741.2839212,
                       298414756.6548355, 167535845.05649027, 831293038.3100051,
                       2877066692.26637, 4556714911.120408, 4495399749.612416,
                       6540657324.65603, 9483332679.982933, 7320049110.109139,
                       2831882365.47341, 642075415.7201841, 232330829.94341758,
                       295217267.99730074, 644535826.2438815, 2413153178.2114296,
                       6806592869.434689, 10807671169.329475, 9894354200.578299,
                       6140591971.902037, 3327674812.1363235, 1813882806.1688507,
                       1688764412.1763225, 5272978502.641453, 21890519640.65196,
                       63104834287.31164, 110617366328.03778, 117253072793.47035,
                       79225705786.44667, 46851628134.12521, 49038268222.14821,
                       64931560230.43322, 63012059833.57386, 41167494150.2681,
                       18730582309.79231, 6770013522.035077, 3060211194.5353923,
                       2384552495.1287203, 1907506017.2503014, 1167827021.1856651,
                       588359091.9492633, 455781079.7513825, 968812386.9513079,
                       2722209981.8645678, 6574351152.901641, 12315191400.752743,
                       17595033773.036114, 19629847250.3481, 18145753777.545944,
                       15211669087.592766, 12510673792.617056, 10183692263.51737,
                       7940407092.292834, 6023505396.342934, 4864985518.198425,
                       4360357703.890077, 3893535154.2831125, 3053170621.4964337,
                       2054664428.7904692, 1423864282.606629, 1486903136.919501,
                       2172819323.205065, 3151439924.87648, 4159139525.612788,
                       5189071626.4420395, 6271953821.825198, 7208951560.02358,
                       7774809519.405792, 8037061014.706172, 8142074164.117566,
                       7900372175.174114, 6941236485.813393, 5258874319.188822,
                       3345322537.4504066, 1770859983.6414924, 788460026.3538643])

    return tspec1


class TestSpectrum():
    """
    Test Spectrum class.

    """

    def test_fit(self, pahdb_theoretical, monkeypatch, test_spec):
        # Read input spectrum.
        spec = resource_filename(
            'amespahdbpythonsuite', 'resources/galaxy_spec.ipac')
        f = ascii.read(spec)
        wave = f['wavelength']
        flux = f['flux']
        sigma = f['sigma']
        waven = [1e4 / x for x in wave]
        # Read the database.
        pahdb = pahdb_theoretical
        # UIDs test list.
        uids = [18, 73, 726, 2054, 223]
        # Retrieve the transitions from the database for the subset of PAHs.
        transitions = pahdb.gettransitionsbyuid(uids)
        # Set emission model.
        transitions.cascade(6 * 1.603e-12, multiprocessing=False)
        # Shift data 15 wavenumber to the red.
        transitions.shift(-15.0)
        # convolve the transitions into a spectrum.
        spectrum = transitions.convolve(
            grid=waven, fwhm=15.0, gaussian=True, multiprocessing=False)
        # fit the spectrum.
        fit = spectrum.fit(flux, sigma)
        # Assert results.
        assert spectrum.uids == uids
        assert fit.uids == [73, 2054, 223]
        np.testing.assert_array_almost_equal(fit.grid, np.array(waven))
        # Check plotting function.
        monkeypatch.setattr(plt, 'show', lambda: None)
        spectrum.plot()
        coadded = fit.coadd(weights=fit.weights, average=False)
        np.testing.assert_array_almost_equal(test_spec, coadded['data'])

    def test_getset(self, pahdb_theoretical):
        # Read the database.
        pahdb = pahdb_theoretical
        # UIDs test list.
        uids = [18, 73]
        trans = pahdb.gettransitionsbyuid(uids)
        spec1 = trans.convolve(fwhm=15.0)
        d1 = spec1.get()
        assert(d1['type'] == 'Spectrum')
        spec2 = spectrum.Spectrum()
        spec2.set(d1)
        d2 = spec2.get()
        assert(d2['type'] == 'Spectrum')
